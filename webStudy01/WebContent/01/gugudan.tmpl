<html>
<!-- 	스타일이라는 태그안에 있는 body부분에 텍스트가 들어있는데 그 텍스트는 css다.라는 마임설정 -->
	<style type = "text/css">
	table{
		background-color: yellow;
		border-collapse : collapse;
		}
	th,td{
		border : 1px solid black;	}
	</style>	
	<body>
	//클라이언트의 요구단을 처리하기위해 폼을 설정
	하나의 폼을 설정했을 때 두개의 데이터가 넘어감. 식별성을 위해 parametername설정
	두 녀석을 숫자로만 입력받기위해 type은 number
		<form>
			최소단 : <input type = "number" name ="minDan"/>
			최대단 : <input type = "number" name ="maxDan"/>			
			<input type = "submit" value="전송">
		</form>
		<table>
			#{gugudan}
		</table>	
	</body>
	
</html>

<!-- 요청이 들어왓을 때 어떤 구조로 동작하는지 -->
<!-- 1.여기서 요청을 받고 응답데이터를 보냈을까? X -->
<!-- 2.클라이언트의 요청을 받았을까? X -->
<!-- 3.요청을 받는건 Servlet. -->

<!-- 4. 불변순서  -->
<!-- 1)servlet에서 젤 먼저 하는게 이 tmpl파일을 읽음. -->
<!-- 2)그리고 그 sevlet에서 구구단이라는 데이터를 만들어냄 -->
<!-- 3)구구단이라는 데이터의 속성명인 구구단이라는 식별자를 통해 플레이스홀더를 치환 -->
<!-- 4)치환된 결과를 가지고 html이라는 mime을 세팅해서 응답데이터를 내보낸다. -->

<!-- 5. 위 순서를 정의할 템플릿이 필요 -> ReadTmlServlet -->
<!-- 1)이 순서를 그대로가지고 가게 하기 위해 상위로 잡음. -->
<!-- 2)구멍나있는 abstract getMime, makeData. -->
<!-- 하위에서는 이 두개의 hook 메소드의 body를 정해주어야한다. -->
<!-- 그래서 구구단 servlet에서 정의함. -->

<!-- 실제 동작은 위 템플릿에서 4가지를 동작함 -->
<!-- ----------------------------------------- -->

<!-- 그 과정에서 우리가 사용하고 있는 2가지 규칙성 -->
<!-- 1.템플릿파일의 경로는 등록되어있는 서블릿의 mapping되어있는 경로를 따라간다. -->
<!-- 2.데이터를 만들어 내고 나서 그 데이터를 치환할 때는 scope에다 어떤 이름으로 넣었느냐에 따라  -->
<!-- 치환되는 데이터의 종류가 달라진다.  -->
<!-- ex) makeData에 이 이름 콕찝어 쓴 이유는 규칙성에 따라 템플릿파일에 있는 이--데이터를 치환하기 위해 -->


<!-- ---------------------- -->
<!-- 진짜소스는? -->

<!-- -tmpl소스 -->
